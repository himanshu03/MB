{"name": "test_countValidMeasure", "status": "failed", "statusDetails": {"message": "AssertionError", "trace": "self = <NewMeasure_test.NewTest testMethod=test_countValidMeasure>\n\n    @allure.testcase(\"Validate measure count with valid measure\")\n    @allure.description(\"\")\n    @pytest.mark.flaky(reruns=2, reruns_delay=5)\n    @allure.severity(allure.severity_level.CRITICAL)\n    def test_countValidMeasure(self):\n        self.lp.login(user_data['username'], user_data['password'])\n        result = self.lp.verifyLoginSuccessful()\n>       self.ts.markFinal(\"test_validLogin\", result, \"Login was successful\")\n\nNewMeasure_test.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <utilities.teststatus.TestStatus object at 0x105721ef0>\ntestName = 'test_validLogin', result = False\nresultMessage = 'Login was successful'\n\n    def markFinal(self, testName, result, resultMessage):\n        \"\"\"\n        Mark the final result of the verification point in a test case\n        This needs to be called at least once in a test case\n        This should be final test status of the test case\n        \"\"\"\n        self.setResult(result, resultMessage)\n    \n        if \"FAIL\" in self.resultList:\n            self.log.error(testName +  \" ### TEST FAILED\")\n            self.resultList.clear()\n>           assert True == False\nE           AssertionError\n\n../../utilities/teststatus.py:63: AssertionError"}, "attachments": [{"name": "log", "source": "e6c0ad5b-724a-43f7-af81-3541252ad329-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "c403f761-2cc5-459d-b80c-577818896339-attachment.txt", "type": "text/plain"}], "start": 1595600451254, "stop": 1595600468587, "uuid": "6bbd2b12-0d24-4300-8220-7c3e0cb71cc2", "historyId": "3f79abd0dc69bd187a5da3b474707913", "testCaseId": "c9d0c54721113a161fe66a41870ed4ff", "fullName": "NewMeasure_test.NewTest#test_countValidMeasure", "labels": [{"name": "severity", "value": "critical"}, {"name": "tag", "value": "@pytest.mark.usefixtures('oneTimeSetUp', 'setUp')"}, {"name": "tag", "value": "flaky(reruns=2, reruns_delay=5)"}, {"name": "suite", "value": "NewMeasure_test"}, {"name": "subSuite", "value": "NewTest"}, {"name": "host", "value": "TGB4012RMDRZ2.tenethealth.net"}, {"name": "thread", "value": "8134-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "NewMeasure_test"}], "links": [{"type": "test_case", "url": "Validate measure count with valid measure", "name": "Validate measure count with valid measure"}]}